{
  
    
        "post0": {
            "title": "Title",
            "content": "Python Quiz list of Dictionaries . import getpass, sys # imports library/ code from site import ENABLE_USER_SITE # imports from a site def question_and_answer(prompt): # defines question_and_answer # definition print(&quot;Question: &quot; + prompt) # asks question msg = input() # get input print(&quot;Answer: &quot; + msg) # prints answer questions = 8 # declaring variables correct = 0 wrong = 0 def question_with_response(dictionary): # definition of optimized function question = list(dictionary.keys())[0] # get the question from dict answer = dictionary[question] # get the answer from dict print(&quot;Question: &quot; + question) rsp = input() global correct, wrong # use global variables if rsp == answer: print(&quot;Correct respose&quot;) correct += 1 else: print(&quot;Incorrect response!&quot;) wrong += 1 print(&#39;Hey there!, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) # program logic beggins print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a quiz?&quot;) # first question begins # This is a list of dictionaries list_quiz =[ {&quot;Who was the quarterback for the Patriots 7 years ago?&quot;:&quot;Tom Brady&quot;}, {&quot;Who is the current quarterback for the Patriots?&quot;:&quot;Mac Jones&quot;}, {&quot;What position does Aaron Rodgers play?&quot;:&quot;Quarterback&quot;}, {&quot;Who is the owner of the Patriots football team?&quot;:&quot;Robert Kraft&quot;}, {&quot;What is the name of the most popular football video game?&quot;:&quot;Madden&quot;}, {&quot;What command is used to include other functions that are developed?&quot;:&quot;import&quot;}, {&quot;What command in this example is used to evaluate a response?&quot;:&quot;if&quot;}, {&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;:&quot;expression&quot;} ] # Ask each question for dictionary in list_quiz: question_with_response(dictionary) # percent calculation percent = (correct/questions) * 100 # finding a perctage print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions) + &quot;. You got &quot; + str(wrong) + &quot; questions wrong. Your percentage on this quiz is &quot; + str(percent) + &quot;%.&quot;) # printing out the score and percentage . Hey there!, root running /bin/python3 You will be asked 8 questions. Question: Are you ready to take a quiz? Answer: Yes Question: Who was the quarterback for the Patriots 7 years ago? Correct respose Question: Who is the current quarterback for the Patriots? Incorrect response! Question: What position does Aaron Rodgers play? Incorrect response! Question: Who is the owner of the Patriots football team? Correct respose Question: What is the name of the most popular football video game? Incorrect response! Question: What command is used to include other functions that are developed? Incorrect response! Question: What command in this example is used to evaluate a response? Incorrect response! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? Incorrect response! root you scored 2/8. You got 6 questions wrong. Your percentage on this quiz is 25.0%. .",
            "url": "https://beebadger.github.io/fastpages/2022/09/06/quiz-lists-dicts.html",
            "relUrl": "/2022/09/06/quiz-lists-dicts.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Markdown Table",
            "content": "This is a Markdown Table to keep track of APCSP course material . Below is the weekly assignments for APCSP course . Tables . Week Tasks Description . 0 | Tools | Tools Setup | . 1 | Python, Jupyter | Intro Python, Jupyter, Fastpages | . 2 | Lists &amp; Collections | Data Abstraction | . 3 |   |   | . 4 |   |   | . 5 |   |   | . {{ &quot;now&quot; | date: &quot;%Y-%m-%d %H:%M&quot; }} . This code block was rendered using the Liquid syntax . This page was last updated at 2022-09-06 04:27. .",
            "url": "https://beebadger.github.io/fastpages/markdown/week2/2022/09/06/Markdown-Table.html",
            "relUrl": "/markdown/week2/2022/09/06/Markdown-Table.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Python List Dictionaries Iteration",
            "content": "Defining a list called InfoDb . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) #print(InfoDb[0]) . Adding records to the InfoDb . third = { &quot;FirstName&quot;: &quot;Nanu&quot;, &quot;LastName&quot;: &quot;Shadow&quot;, &quot;DOB&quot;: &quot;August 5&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;san@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Jeep&quot;,&quot;4Runner&quot;] } # add the dict to List InfoDb.append(third) # create dict fourth = { &quot;FirstName&quot;: &quot;Lional&quot;, &quot;LastName&quot;: &quot;Messi&quot;, &quot;DOB&quot;: &quot;January 30&quot;, &quot;Residence&quot;: &quot;Barcelona&quot;, &quot;Email&quot;: &quot;LMessi@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Lamborghini&quot;,&quot;Maserati&quot;,&quot;Corvette&quot;] } # add the dict to List InfoDb.append(fourth) InfoDb.append({ &quot;FirstName&quot;: &quot;Dan&quot;, &quot;LastName&quot;: &quot;Mark&quot;, &quot;DOB&quot;: &quot;October 10&quot;, &quot;Residence&quot;: &quot;San Francisco&quot;, &quot;Email&quot;: &quot;DMark@yahoo.com&quot;, &quot;Owns_Cars&quot;: [&quot;2006 toyota sienna&quot;, &quot;2011-Hellcat&quot;, &quot;2003-Toyota Carolla&quot;] }) . print function: of InfoDb content . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() . For Loop Iteration . def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Nanu Shadow Residence: San Diego Birth Day: August 5 Cars: Jeep, 4Runner Lional Messi Residence: Barcelona Birth Day: January 30 Cars: Lamborghini, Maserati, Corvette Dan Mark Residence: San Francisco Birth Day: October 10 Cars: 2006 toyota sienna, 2011-Hellcat, 2003-Toyota Carolla . While Loop Iteration . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Nanu Shadow Residence: San Diego Birth Day: August 5 Cars: Jeep, 4Runner Lional Messi Residence: Barcelona Birth Day: January 30 Cars: Lamborghini, Maserati, Corvette Dan Mark Residence: San Francisco Birth Day: October 10 Cars: 2006 toyota sienna, 2011-Hellcat, 2003-Toyota Carolla . Iteration using recursion . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Nanu Shadow Residence: San Diego Birth Day: August 5 Cars: Jeep, 4Runner Lional Messi Residence: Barcelona Birth Day: January 30 Cars: Lamborghini, Maserati, Corvette Dan Mark Residence: San Francisco Birth Day: October 10 Cars: 2006 toyota sienna, 2011-Hellcat, 2003-Toyota Carolla . For Loop Iteration With Index . print(&quot;for loop with index output n&quot;) # display indices in the list for i in range(len(InfoDb)): print_data(InfoDb[i]) . for loop with index output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Nanu Shadow Residence: San Diego Birth Day: August 5 Cars: Jeep, 4Runner Lional Messi Residence: Barcelona Birth Day: January 30 Cars: Lamborghini, Maserati, Corvette Dan Mark Residence: San Francisco Birth Day: October 10 Cars: 2006 toyota sienna, 2011-Hellcat, 2003-Toyota Carolla . For Loop Iterate in a Reverse Order . for i in reversed(range(len(InfoDb))) : print_data(InfoDb[i]) . Dan Mark Residence: San Francisco Birth Day: October 10 Cars: 2006 toyota sienna, 2011-Hellcat, 2003-Toyota Carolla Lional Messi Residence: Barcelona Birth Day: January 30 Cars: Lamborghini, Maserati, Corvette Nanu Shadow Residence: San Diego Birth Day: August 5 Cars: Jeep, 4Runner Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac . List Other Methods -- reverse() . print(&quot;other methods that can be performed on lists: reverse()&quot;) InfoDb.reverse() while_loop() . other methods that can be performed on lists: reverse() While loop output Dan Mark Residence: San Francisco Birth Day: October 10 Cars: 2006 toyota sienna, 2011-Hellcat, 2003-Toyota Carolla Lional Messi Residence: Barcelona Birth Day: January 30 Cars: Lamborghini, Maserati, Corvette Nanu Shadow Residence: San Diego Birth Day: August 5 Cars: Jeep, 4Runner Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac . Add New Entry to List with User Input . def addNewToInfoDb(): #print(&quot;Enter a key:&quot;) key = input(&quot;Enter a key:&quot;) #print(&quot;Enter value:&quot;) value = input(&quot;Enter value:&quot;) InfoDb.append({key: value}) print(&quot;You added &quot; + key + &quot; : &quot; + str(value)) addNewToInfoDb() . You added breed : Labarador .",
            "url": "https://beebadger.github.io/fastpages/2022/09/05/lists-dictionaries.html",
            "relUrl": "/2022/09/05/lists-dictionaries.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Theme Changes to Midnight",
            "content": "Remote Theme . Changing remote theme for a moment . Theme – Frontpage look . Changing remote theme the frontpage looks like this with color changes on the picture below . Theme – tags looks . Changing remote theme the tags looks like this with style changes on the right picture below . Theme – Vocab looks . Changing remote theme the vocab looks like this with style and color changes on the right picture below . Theme – Issues encountered . The Fronpage looks off. Tags style completely changes. Vocab background erased and is all white. .",
            "url": "https://beebadger.github.io/fastpages/themes/week2/2022/09/05/Themes-Midnight-Changes.html",
            "relUrl": "/themes/week2/2022/09/05/Themes-Midnight-Changes.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Bash Tool Setup",
            "content": "Verify Tools have been installed . echo &quot;Checking python is installed&quot; if eval &quot;python --version&quot;; then echo &quot;Python is installed&quot; else echo &quot;Python is not installed&quot; fi echo &quot;Checking Conds is installed&quot; if eval &quot;conda --version&quot;; then echo &quot;Conda is installed&quot; else echo &quot;Conda is not installed&quot; fi echo &quot;Checking jupyter is installed&quot; if eval &quot;jupyter --version&quot;; then echo &quot;jupyter is installed&quot; else echo &quot;jupyter is not installed&quot; fi echo &quot;Checking javascript is installed&quot; if eval &quot;javascript --version&quot;; then echo &quot;javascript is installed&quot; else echo &quot;javascript is not installed&quot; fi . Checking python is installed004l Python 3.9.1204l Python is installed Checking Conds is installed conda 4.13.0004l Conda is installed Checking jupyter is installed Selected Jupyter core packages...[?2004l IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 jupyter is installed Checking javascript is installed javascript: command not found04l javascript is not installed . . Update repository with Bash . #go to the git directory cd /pwd/../../ #make changes to files and then add git add . #commit git commit -m &quot;fake update&quot; #update git push origin master . Automate Installation!! . echo &quot;installing Jupyter bash kernel&quot; pip install bash_kernel python -m bash_kernel.install echo &quot;Installation complete&quot; .",
            "url": "https://beebadger.github.io/fastpages/jupyter/2022/08/29/bash-tool-setup.html",
            "relUrl": "/jupyter/2022/08/29/bash-tool-setup.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "AP Environmental Science!!",
            "content": "AP Environmental Science . Lab: Tragedy of the Commons Fishing Contest . Purpose . The purpose of this simulation is to demonstrate how individuals might utilize one of more common resources and the potential result(s) of various resource use approaches. . Materials Fishing tools (straws, chopsticks, or something similar) nothing spoon or fork-like! Common Pond (sheet of paper, or desk) Private Pond (optional) Fish (6 of each of four types of “fish”–for example, 6 sour worms, 6 regular M&amp;Ms, 6 gummi bears and 6 candied oranges) . Procedure . Work in groups of 3 or 4 (with distance learning, you can either get family members/others living in your household (best option) or take on the role of all fisherpersons separately by yourself). Each group will begin this exercise with 24 “fish.” This start total of 24 is to be comprised of six fish each of four different types. For example, 6 sour worms, 6 regular M&amp;Ms, 6 gummi bears and 6 candied oranges. . Each fisherperson needs two straws (or chopsticks). Hands may not be used during the fishing process; that is poaching. It is illegal. You will lose your boat (or computer), job, fishing license, your entire harvest will be distributed to others. Remember, people who make good choices don’t break the law. Each fish has a current market value (again fish types may vary) . . CONCLUSIONS . Discuss any significant trends illustrated in carrying out this exercise. . At the beginning of the experiment me and my group realized that is much easier to catch fish and sell them due to an abundance of fish. At the end of the experiment, due to the overfishing of fish the population had declined and it was harder to catch anything. . Did your fishing group talk about the harvesting approach that would be taken during each season? What was your decision if one was reached? . Our fishing group talked about the harvesting approach that would be taken during each season. Our decision after the discussion was that we would incorporate a law that would only allow us to catch a certain amount of fish every time we fished. This fishing policy would make the fish to have enough time to repopulate and get back to their correct population. . Compare your group’s results with the other groups. Explain whether or not you think your group was successful in using the ocean’s resources in a sustainable manner. . After comparing our groups data to other groups - we realize that our group ( alont with many of the other groups) did not use the pond resources to keep the pond fishes sustainable. We realized that we have overfished and as a result to that the fish population has decreased gradually. The overfishing made it more harder to fish and resluted in less abundance of fish in the pond. We were not successful in using the pond resources in a sustainable manner. .",
            "url": "https://beebadger.github.io/fastpages/apes/week1/2022/08/29/AP-Environmental-Science.html",
            "relUrl": "/apes/week1/2022/08/29/AP-Environmental-Science.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Python Quiz and Hacks",
            "content": "Python Quiz and Hacks . This is the quiz that I have made regarding American Football as well as Mr.Mortinson&#39;s questions. . import getpass, sys # imports library/ code from site import ENABLE_USER_SITE # imports from a site def question_and_answer(prompt): # defines question_and_answer print(&quot;Question: &quot; + prompt) # asks question msg = input() # get input print(&quot;Answer: &quot; + msg) # prints answer def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 8 # declaring variables correct = 0 wrong = 0 print(&#39;Hey there!, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) # program logic beggins print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) # first question begins rsp = question_with_response(&quot;Who was the quarterback for the Patriots 7 years ago?&quot;) # second question if rsp == &quot;Tom Brady&quot;: # if statement starts print(rsp + &quot; Good Job!&quot;) correct += 1 # adds 1 to correct variable elif rsp == &quot;Mac Jones&quot;: # else if statement print(rsp + &quot; is the current quarterback, the question asked for 7 years ago.&quot;) wrong += 1 # adds 1 to wrong variable else: # else statement print(&quot;Your answer of &quot; + rsp + &quot; is incorrect! Here is another question.&quot;) wrong += 1 rsp = question_with_response(&quot;Who is the current quarterback for the Patriots?&quot;) # third question if rsp == &quot;Mac Jones&quot;: print(rsp + &quot; is the current quarterback for the New England Patriots!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) wrong += 1 rsp = question_with_response(&quot;What position does Aaron Rodgers play?&quot;) # fourth question if rsp == &quot;Quarterback&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) wrong += 1 rsp = question_with_response(&quot;Who is the owner of the Patriots football team?&quot;) # fifth question if rsp == &quot;Robert Kraft&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) wrong += 1 rsp = question_with_response(&quot;What is the name of the most popular football video game?&quot;) #sixth question if rsp == &quot;Madden&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) wrong += 1 rsp = question_with_response(&quot;What command is used to include other functions that are developed?&quot;) #Teachers Questions if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command in this example is used to evaluate a response?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) percent = (correct/questions) * 100 # finding a perctage print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions) + &quot;. You got &quot; + str(wrong) + &quot; questions wrong. Your percentage on this quiz is &quot; + str(percent) + &quot;%.&quot;) # printing out the score and percentage . Hey there!, root running /bin/python3 You will be asked 8 questions. Question: Are you ready to take a test? Answer: Yes! Question: Who was the quarterback for the Patriots 7 years ago? Tom Brady Good Job! Question: Who is the current quarterback for the Patriots? Tom Brady is incorrect! Question: What position does Aaron Rodgers play? Quarterback is correct! Question: Who is the owner of the Patriots football team? Quarterback is incorrect! Question: What is the name of the most popular football video game? Madden is correct! Question: What command is used to include other functions that are developed? import is correct! Question: What command in this example is used to evaluate a response? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! root you scored 6/8. You got 2 questions wrong. Your percentage on this quiz is 75.0%. .",
            "url": "https://beebadger.github.io/fastpages/2022/08/28/python-hacks.html",
            "relUrl": "/2022/08/28/python-hacks.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Python Quiz and Hacks For Extra Credit",
            "content": "Python Quiz and Hacks For Extra Credit . This is the quiz that I have made regarding American Football as well as Mr.Mortinson&#39;s questions. . import getpass, sys # imports library/ code from site import ENABLE_USER_SITE # imports from a site def question_and_answer(prompt): # defines question_and_answer # definition print(&quot;Question: &quot; + prompt) # asks question msg = input() # get input print(&quot;Answer: &quot; + msg) # prints answer questions = 8 # declaring variables correct = 0 wrong = 0 def question_with_response(prompt,answer): # definition of optimized function print(&quot;Question: &quot; + prompt) rsp = input() global correct, wrong # use global variables if rsp == answer: print(&quot;Correct respose&quot;) correct += 1 else: print(&quot;Incorrect response!&quot;) wrong += 1 print(&#39;Hey there!, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) # program logic beggins print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) # first question begins # definition of arrray with two strings array=[ [&quot;Who was the quarterback for the Patriots 7 years ago?&quot;,&quot;Tom Brady&quot;], [&quot;Who is the current quarterback for the Patriots?&quot;,&quot;Mac Jones&quot;], [&quot;What position does Aaron Rodgers play?&quot;,&quot;Quarterback&quot;], [&quot;Who is the owner of the Patriots football team?&quot;,&quot;Robert Kraft&quot;], [&quot;What is the name of the most popular football video game?&quot;,&quot;Madden&quot;], [&quot;What command is used to include other functions that are developed?&quot;,&quot;import&quot;], [&quot;What command in this example is used to evaluate a response?&quot;,&quot;if&quot;], [&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;,&quot;expression&quot;] ] for rows in array: question_with_response(rows[0],rows[1]) # third question # percent calculation percent = (correct/questions) * 100 # finding a perctage print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions) + &quot;. You got &quot; + str(wrong) + &quot; questions wrong. Your percentage on this quiz is &quot; + str(percent) + &quot;%.&quot;) # printing out the score and percentage . Hey there!, root running /bin/python3 You will be asked 8 questions. Question: Are you ready to take a test? Answer: Yes Question: Who was the quarterback for the Patriots 7 years ago? Incorrect response! Question: Who is the current quarterback for the Patriots? Incorrect response! Question: What position does Aaron Rodgers play? Correct respose Question: Who is the owner of the Patriots football team? Incorrect response! Question: What is the name of the most popular football video game? Correct respose Question: What command is used to include other functions that are developed? Correct respose Question: What command in this example is used to evaluate a response? Correct respose Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? Correct respose root you scored 5/8. You got 3 questions wrong. Your percentage on this quiz is 62.5%. .",
            "url": "https://beebadger.github.io/fastpages/2022/08/28/python-hacks-extra-credit.html",
            "relUrl": "/2022/08/28/python-hacks-extra-credit.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "I Love My Dog",
            "content": ". This is a photo of my dog, Shadow, he is 8 years old. I love walking with him and playing with him in my backyard. I also love to take him to the dog park as well as the dog beach to play with all the other dogs. . Shadow with stick . . Shadow with bone . . Shadow enjoying view . . Shadow at sunset!! . . Shadow perfect sunset!!! . .",
            "url": "https://beebadger.github.io/fastpages/markdown/week1/2022/08/28/Dog-photo.html",
            "relUrl": "/markdown/week1/2022/08/28/Dog-photo.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Apes Class Material",
            "content": "Name Navan Yatavelli . Lab: Tragedy of the Commons . Fishing Contest . APES . Inspired by Ben Smith, modified by Andy Milbauer . Purpose . The purpose of this simulation is to demonstrate how individuals might utilize one of more common resources and the potential result(s) of various resource use approaches. . Materials . Fishing tools (straws, chopsticks, or something similar) nothing spoon or fork-like! . | Common Pond (sheet of paper, or desk) . | Private Pond (optional) . | Fish (6 of each of four types of “fish”–for example, 6 sour worms, 6 regular M &amp;Ms, 6 gummi bears and 6 candied oranges) . | . Procedure . Work in groups of 3 or 4 (with distance learning, you can either get family members/others living in your household (best option) or take on the role of all fisherpersons separately by yourself). . | Each group will begin this exercise with 24 “fish.” This start total of 24 is to be comprised of six fish each of four different types. For example, 6 sour worms, 6 regular M &amp;Ms, 6 gummi bears and 6 candied oranges. . . | Each fisherperson needs two straws (or chopsticks). . | Hands may not be used during the fishing process; that is poaching. It is illegal. You will lose your boat (or computer), job, fishing license, your entire harvest will be distributed to others. Remember, people who make good choices don’t break the law. . | Each fish has a current market value (again fish types may vary) . Sour Worms = $10.00 M &amp;Ms = $4.00 . | Gummi bears = $6.00 Gummi Oranges = $2.00 . | . | Each student must catch ONE FISH per fishing season in order to stay in business. IT IS UP TO EACH FISHERPERSON AND/OR EACH FISHING GROUP TO DECIDE HOW MANY, BEYOND THE REQUIRED ONE PER PERSON, FISH WILL BE HARVESTED. . | Each fishing season will last 15 seconds. . | At the end of each season, one fish (OF THE SAME SPECIES) will be added for every fish remaining in the “water commons.” . Assume fish reproduce through mitosis . | . | PRIVATE POND (optional): You may carry out this exercise with each “fisherperson” having a small paper plate, salsa cup, or paper towel to represent a small, privately-owner pond in which fish are placed to start the simulation. These fish can also reproduce if they haven’t been harvested. . | To colonize this pond place you must first catch fish from the common water and place part of this catch in your private pond. YOU WILL NEED TO EAT AT LEAST ONE FISH EACH SEASON TO KEEP THE YOUR BUSINESS FINANCIALLY VIABLE. . | Each fisherperson may choose to harvest fish from the “common water” or their private lake, still needing at least one fish per season to stay in business. The “restocking” procedure at the conclusion of each fishing season remains the same: one “new” fish of the same “species” is added for every two fish of that species remaining. . | What happens when BALDMAN (the company/person that restocks fish) runs out of fish? You depleted the fishery capability of that species . | See the fish, be the fish… . | Data . TOTAL NUMBER OF FISH CAPTURED (This is ONLY THE FISH YOU EAT, not private ponds) . | fisherperson Year 1 Year 2 Year 3 Year 4 Year 5 Year 6 . William | 2 | 1 | 0 | 5 | 3 | 1 | . Payton | 5 | 3 | 1 | 5 | 5 | 3 | . Navan | 6 | 2 | 7 | 6 | 5 | 2 | .   |   |   |   |   |   |   | . Total # | 13 | 6 | 8 | 16 | 13 | 6 | . TOTAL VALUE OF FISH CAPTURED (calculate dollar amount of each catch, this is ONLY THE FISH YOU EAT, not private ponds) . | fisherperson Year 1 Year 2 Year 3 Year 4 Year 5 Year 6 . William | $12 | $4 | $0 | $34 | $14 | $6 | . Payton | $15 | $8 | $4 | $40 | $26 | $26 | . Navan | $24 | $2 | $60 | $42 | $38 | $20 | .   |   |   |   |   |   |   | . Total value | $51 | $14 | $64 | $116 | $73 | $52 | . TOTAL HARVEST FOR 6 YEARS . | fisherperson # fish Value of fish . William | 12 | $70 | . Payton | 22 | $119 | . Navan | 28 | $188 | .   |   |   | . 6 year totals | 62 | $377 | . CONCLUSIONS(yes, everyone needs to answer these for full credit), Don’t spend more than 20 minutes on these questions. . Discuss any significant trends illustrated in carrying out this exercise. . | At the beginning of the experiment me and my group realized that is much easier to catch fish and sell them due to an abundance of fish. At the end of the experiment, due to the overfishing of fish the population had declined and it was harder to catch anything. . Did your fishing group talk about the harvesting approach that would be taken during each season? What was your decision if one was reached? . | Our fishing group talked about the harvesting approach that would be taken during each season. Our decision after the discussion was that we would incorporate a law that would only allow us to catch a certain amount of fish every time we fished. This fishing policy would make the fish to have enough time to repopulate and get back to their correct population. . Compare your group’s results with the other groups. Explain whether or not you think your group was successful in using the ocean’s resources in a sustainable manner. . | After comparing our groups data to other groups - we realize that our group ( alont with many of the other groups) did not use the pond resources to keep the pond fishes sustainable. We realized that we have overfished and as a result to that the fish population has decreased gradually. The overfishing made it more harder to fish and resluted in less abundance of fish in the pond. We were not successful in using the pond resources in a sustainable manner. .",
            "url": "https://beebadger.github.io/fastpages/2022/08/28/APES-Class-Material.html",
            "relUrl": "/2022/08/28/APES-Class-Material.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Ap Economics",
            "content": "Question 1: . Define Economics, explaining the Economic Problem. . Economics is a social science which looks at how resources are allocated and is the study of who gets the resources. Scarcity is an economic problem. People have wants and needs but the resources to fulfill those needs and wants are limited. Therefore, society has to come up with systems that determine who gets what. . Question 2: . List and define the four Factors of Production. . Four Factors of Production(FOPs) are: Land, labor, capital and entrepreneurship. . Land: This refers to natural resources. Examples are water, minerals, trees and oil. . Labor: This refers to work people do in the production of goods and services. Examples are factory workers, teachers, waiters, farmers . Capital: This refers to man-made factors of production. Examples are machinery, tools, equipment, factories, road, and harbors used in the production process. . Entrepreneurship: This refers to those risk-takers who organize the factors of production into goods and services. . Question 3: . Explain the difference between tradeoffs and opportunity costs, using the example of eating food. . Trade offs are used when you need to sacrifice an object in order to gain another object. For example, in order to make oreo icecream you need to crush Oreos (that you already have and could eat plain) into the icecream. But instead of eating just plain Oreos you gave them up in order to make the Oreo icecream, you can no longer eat the oreos that you once had. In opportunity costs, you never had the oreos, you could either make the oreos or a chocolate chip cookie using batter. If you decide to make the cookies the opportunity cost are the oreos,unlike the tradeoff where you had the oreos to begin with. . Question 4: . The following table represents the combinations of goods that Bakeryland can make using its resources. Use this information to answer the questions that follow: .   A B C D E F G . Cookies | 12 | 10 | 8 | 6 | 4 | 2 | 0 | . Cupcakes | 0 | 1 | 2 | 3 | 4 | 5 | 6 | . Create a diagram of this data with cookies on the vertical axis and cupcakes on the horizontal axis. . | . Assume Bakeryland is currently producing at point A, 12 cookies and 0 cupcakes. . What is the opportunity cost of increasing the production of cupcakes from 0 to 1? The loss of __2___ cookies. . | What is the opportunity cost of increasing the production of cupcakes from 1 to 2? The loss of __2____ cookies. . | What is the opportunity cost of moving from C to D? 2 cookies . | What is the opportunity cost of moving from D to E? 2 cookies . | What is the opportunity cost of moving from F to G? 2 cookies . | | c. Is this is an example of constant or increasing opportunity costs? . This is an example of constant opportunity costs . Question 5 . The following table represents the combinations of goods that Strangeland can make using its resources. Use this information to answer the questions that follow: .   A B C D . Robots | 12 | 10 | 6 | 0 | . Cheese | 0 | 1 | 2 | 3 | . Create a diagram of this data with robots on the vertical axis and cheese on the horizontal axis. . | . Assume Strangeland is currently producing at point A, 12 robots and 0 units of cheese. . The opportunity cost of increasing production of cheese from 0 to 1 unit is the loss of _2___ units of robots. . | The opportunity cost of increasing production of cheese from 1 unit to 2 units is the loss of ___4____ units of robots. . | The opportunity cost of moving from point C to point D is ______6 units of robots_______. . | | c. Is this is an example of constant or increasing opportunity costs? . This is an example of increasing opportunity costs . Question 6 . In the example in question 5 above, if point F lies outside of the PPC, what does this tell you? . If point F lies outside of the PPC, then we need increasing supply of resources, which cannot be attained with the existing resources . Question 7 . In the example in question 5 above, if point G lies inside of the PPC, what does this tell you? . If point G lies inside the PPC, it shows unemployment and idle factors of production . Question 8 . Draw a PPC for Donuts and Cell Phones, showing changes for each of the following conditions: . New technology makes factories more productive. . | Increases production possibilities for both the doughnut and the phones . . There’s a decrease in the demand for donuts. . | A change in demand does not shift the curve . . Dairy farmers go out of business, and butter is a resource for donuts. . | A shift inward only for doughnuts . . Many workers are unemployed. . | Curve does not shift. Unemployment is just a point inside the curve . . Workers receive improved healthcare. . | Quality of workers improved and the curve shift outward . . Question 9 . Explain the difference between productive efficiency and allocative efficiency. . Productive efficiency is possible combinations of goods a country can produce given its available resources. Any point on the PPC curve is productively efficient. Allocative efficiency is optimal distribution of goods and services. For this, we need to know what combination of the two goods society most wants. . Question 10 . How is economic growth shown on a PPC? Explain. . Economic growth is shown when the PPC curve is shifted outward. This shows how there is a higher demand for both products because of increase in people’s affordability.. Higher affordability shows higher economic growth. .",
            "url": "https://beebadger.github.io/fastpages/2022/08/28/AP-Economics.html",
            "relUrl": "/2022/08/28/AP-Economics.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Jupyter Notebook & Python Code",
            "content": "Printing &quot;DNHS!&quot; Using Python . print(&quot;Hello&quot;) print(&quot;DNHS!&quot;) . Hello DNHS! .",
            "url": "https://beebadger.github.io/fastpages/2022/08/21/Firstnotebook.html",
            "relUrl": "/2022/08/21/Firstnotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Beebadger's Markdown Post",
            "content": "Hello All . My First Markdown Page . DNHS is fun place!!! . What I like . I like Sports!!! . Favorite Things: Color: Blue Sport: Football . Code Things . print(&quot;DNHS is really really Fun place!!:&quot;) .",
            "url": "https://beebadger.github.io/fastpages/markdown/week0/2022/08/21/FirstMD.html",
            "relUrl": "/markdown/week0/2022/08/21/FirstMD.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://beebadger.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post14": {
            "title": "Markdown Post!!",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://beebadger.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hello – This is Beebadger!!! .",
          "url": "https://beebadger.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page7": {
          "title": "Vocab",
          "content": "Vocab . A collection of vocabulary this trimester . Basic Terms . Variable: A value that changes based off of conditions Statement: A simple programing statement . File Types . .html: Used for designing webpages .md: Also used for basic webpage design and can be used with python .ipynb: Uses a combination of python and .md .py: a python file .",
          "url": "https://beebadger.github.io/fastpages/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://beebadger.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}